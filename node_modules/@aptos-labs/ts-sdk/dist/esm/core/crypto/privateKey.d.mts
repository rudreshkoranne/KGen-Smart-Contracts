import { HexInput } from '../../types/index.mjs';
import { P as PublicKey } from '../../publicKey-_tPa99ea.mjs';
import { Signature } from './signature.mjs';
import '../../utils/apiEndpoints.mjs';
import '../../types/indexer.mjs';
import '../../types/generated/operations.mjs';
import '../../types/generated/types.mjs';
import '../../bcs/serializer.mjs';
import '../hex.mjs';
import '../common.mjs';
import '../accountAddress.mjs';
import '../../bcs/deserializer.mjs';
import '../../transactions/instances/transactionArgument.mjs';

/**
 * Represents a private key used for signing messages and deriving the associated public key.
 *
 * @method sign - Signs the given message with the private key.
 * @method publicKey - Derives the public key associated with the private key.
 * @method toUint8Array - Retrieves the private key in bytes.
 */
interface PrivateKey {
    /**
     * Sign the given message with the private key to create a signature.
     * @param message - The message to be signed, provided in HexInput format.
     * @returns A Signature object representing the signed message.
     */
    sign(message: HexInput): Signature;
    /**
     * Derive the public key associated with the private key.
     */
    publicKey(): PublicKey;
    /**
     * Get the private key in bytes (Uint8Array).
     */
    toUint8Array(): Uint8Array;
}

export type { PrivateKey };
